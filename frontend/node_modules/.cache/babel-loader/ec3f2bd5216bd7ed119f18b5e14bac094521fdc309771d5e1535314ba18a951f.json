{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst mongoose = require(\"mongoose\");\nconst bcrypt = require('bcryptjs');\nconst Products = require(\"./Products\");\nconst Users = require(\"./Users\");\nconst Orders = require(\"./Orders\");\nconst stripe = require(\"stripe\")(\"sk_test_51KUDBXSE1AGsrDtwPrEyIlUO6MdKE5YUC77sdqUjLmrwjiEXxcGQPtkEDYlKmlaT6Ll0IIfMtBxaRYoWTEfdXYAh00tng8EKHY\");\nconst app = express();\nconst port = 8000;\n\n// Middlewares\napp.use(express.json());\napp.use(cors());\n\n// connection url\nconst connection_url = \"mongodb+srv://rohitharbola91:Admin@12345@cluster0.taxynj1.mongodb.net/yourdbname?retryWrites=true&w=majority\";\nmongoose.connect(connection_url, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\n// API\napp.get(\"/\", (req, res) => res.status(200).send(\"Home Page\"));\n\n// Add product\napp.post(\"/products/add\", async (req, res) => {\n  const productDetail = req.body;\n  console.log(\"Product Detail >>>>\", productDetail);\n  try {\n    const data = await Products.create(productDetail);\n    res.status(201).send(data);\n  } catch (err) {\n    res.status(500).send(err.message);\n    console.log(err);\n  }\n});\napp.get(\"/products/get\", async (req, res) => {\n  try {\n    const data = await Products.find();\n    res.status(200).send(data);\n  } catch (err) {\n    res.status(500).send(err);\n  }\n});\n\n// API for SIGNUP\napp.post(\"/auth/signup\", async (req, res) => {\n  const {\n    email,\n    password,\n    fullName\n  } = req.body;\n  const encrypt_password = await bcrypt.hash(password, 10);\n  const userDetail = {\n    email: email,\n    password: encrypt_password,\n    fullName: fullName\n  };\n  try {\n    const user_exist = await Users.findOne({\n      email: email\n    });\n    if (user_exist) {\n      res.send({\n        message: \"The Email is already in use !\"\n      });\n    } else {\n      const result = await Users.create(userDetail);\n      res.send({\n        message: \"User Created Successfully\"\n      });\n    }\n  } catch (err) {\n    res.status(500).send({\n      message: err.message\n    });\n  }\n});\n\n// API for LOGIN\napp.post(\"/auth/login\", async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  try {\n    const userDetail = await Users.findOne({\n      email: email\n    });\n    if (userDetail) {\n      if (await bcrypt.compare(password, userDetail.password)) {\n        res.send(userDetail);\n      } else {\n        res.send({\n          error: \"Invalid Password\"\n        });\n      }\n    } else {\n      res.send({\n        error: \"User does not exist\"\n      });\n    }\n  } catch (err) {\n    res.status(500).send({\n      error: err.message\n    });\n  }\n});\n\n// API for PAYMENT\napp.post(\"/payment/create\", async (req, res) => {\n  const total = req.body.amount;\n  console.log(\"Payment Request received for this amount:\", total);\n  try {\n    const payment = await stripe.paymentIntents.create({\n      amount: total * 100,\n      currency: \"inr\"\n    });\n    res.status(201).send({\n      clientSecret: payment.client_secret\n    });\n  } catch (err) {\n    res.status(500).send({\n      error: err.message\n    });\n  }\n});\n\n// API to add ORDER DETAILS\napp.post(\"/orders/add\", async (req, res) => {\n  const {\n    basket: products,\n    price,\n    email,\n    address\n  } = req.body;\n  const orderDetail = {\n    products: products,\n    price: price,\n    address: address,\n    email: email\n  };\n  try {\n    const result = await Orders.create(orderDetail);\n    console.log(\"Order added to database >> \", result);\n    res.status(201).send(result);\n  } catch (err) {\n    res.status(500).send({\n      error: err.message\n    });\n  }\n});\napp.post(\"/orders/get\", async (req, res) => {\n  const email = req.body.email;\n  try {\n    const result = await Orders.find();\n    const userOrders = result.filter(order => order.email === email);\n    res.send(userOrders);\n  } catch (err) {\n    res.status(500).send({\n      error: err.message\n    });\n  }\n});\napp.listen(port, () => console.log(\"listening on the port\", port));","map":{"version":3,"names":["express","require","cors","mongoose","bcrypt","Products","Users","Orders","stripe","app","port","use","json","connection_url","connect","useNewUrlParser","useUnifiedTopology","get","req","res","status","send","post","productDetail","body","console","log","data","create","err","message","find","email","password","fullName","encrypt_password","hash","userDetail","user_exist","findOne","result","compare","error","total","amount","payment","paymentIntents","currency","clientSecret","client_secret","basket","products","price","address","orderDetail","userOrders","filter","order","listen"],"sources":["C:/Users/lenovo/Desktop/Amazon/frontend/src/Components/Orders.js"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst mongoose = require(\"mongoose\");\r\nconst bcrypt = require('bcryptjs');\r\nconst Products = require(\"./Products\");\r\nconst Users = require(\"./Users\");\r\nconst Orders = require(\"./Orders\");\r\nconst stripe = require(\"stripe\")(\r\n  \"sk_test_51KUDBXSE1AGsrDtwPrEyIlUO6MdKE5YUC77sdqUjLmrwjiEXxcGQPtkEDYlKmlaT6Ll0IIfMtBxaRYoWTEfdXYAh00tng8EKHY\"\r\n);\r\n\r\nconst app = express();\r\nconst port = 8000;\r\n\r\n// Middlewares\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n// connection url\r\nconst connection_url = \"mongodb+srv://rohitharbola91:Admin@12345@cluster0.taxynj1.mongodb.net/yourdbname?retryWrites=true&w=majority\";\r\nmongoose.connect(connection_url, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n});\r\n\r\n// API\r\napp.get(\"/\", (req, res) => res.status(200).send(\"Home Page\"));\r\n\r\n// Add product\r\napp.post(\"/products/add\", async (req, res) => {\r\n  const productDetail = req.body;\r\n\r\n  console.log(\"Product Detail >>>>\", productDetail);\r\n\r\n  try {\r\n    const data = await Products.create(productDetail);\r\n    res.status(201).send(data);\r\n  } catch (err) {\r\n    res.status(500).send(err.message);\r\n    console.log(err);\r\n  }\r\n});\r\n\r\napp.get(\"/products/get\", async (req, res) => {\r\n  try {\r\n    const data = await Products.find();\r\n    res.status(200).send(data);\r\n  } catch (err) {\r\n    res.status(500).send(err);\r\n  }\r\n});\r\n\r\n// API for SIGNUP\r\napp.post(\"/auth/signup\", async (req, res) => {\r\n  const { email, password, fullName } = req.body;\r\n\r\n  const encrypt_password = await bcrypt.hash(password, 10);\r\n\r\n  const userDetail = {\r\n    email: email,\r\n    password: encrypt_password,\r\n    fullName: fullName,\r\n  };\r\n\r\n  try {\r\n    const user_exist = await Users.findOne({ email: email });\r\n\r\n    if (user_exist) {\r\n      res.send({ message: \"The Email is already in use !\" });\r\n    } else {\r\n      const result = await Users.create(userDetail);\r\n      res.send({ message: \"User Created Successfully\" });\r\n    }\r\n  } catch (err) {\r\n    res.status(500).send({ message: err.message });\r\n  }\r\n});\r\n\r\n// API for LOGIN\r\napp.post(\"/auth/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const userDetail = await Users.findOne({ email: email });\r\n\r\n    if (userDetail) {\r\n      if (await bcrypt.compare(password, userDetail.password)) {\r\n        res.send(userDetail);\r\n      } else {\r\n        res.send({ error: \"Invalid Password\" });\r\n      }\r\n    } else {\r\n      res.send({ error: \"User does not exist\" });\r\n    }\r\n  } catch (err) {\r\n    res.status(500).send({ error: err.message });\r\n  }\r\n});\r\n\r\n// API for PAYMENT\r\napp.post(\"/payment/create\", async (req, res) => {\r\n  const total = req.body.amount;\r\n  console.log(\"Payment Request received for this amount:\", total);\r\n\r\n  try {\r\n    const payment = await stripe.paymentIntents.create({\r\n      amount: total * 100,\r\n      currency: \"inr\",\r\n    });\r\n\r\n    res.status(201).send({\r\n      clientSecret: payment.client_secret,\r\n    });\r\n  } catch (err) {\r\n    res.status(500).send({ error: err.message });\r\n  }\r\n});\r\n\r\n// API to add ORDER DETAILS\r\napp.post(\"/orders/add\", async (req, res) => {\r\n  const { basket: products, price, email, address } = req.body;\r\n\r\n  const orderDetail = {\r\n    products: products,\r\n    price: price,\r\n    address: address,\r\n    email: email,\r\n  };\r\n\r\n  try {\r\n    const result = await Orders.create(orderDetail);\r\n    console.log(\"Order added to database >> \", result);\r\n    res.status(201).send(result);\r\n  } catch (err) {\r\n    res.status(500).send({ error: err.message });\r\n  }\r\n});\r\n\r\napp.post(\"/orders/get\", async (req, res) => {\r\n  const email = req.body.email;\r\n\r\n  try {\r\n    const result = await Orders.find();\r\n    const userOrders = result.filter((order) => order.email === email);\r\n    res.send(userOrders);\r\n  } catch (err) {\r\n    res.status(500).send({ error: err.message });\r\n  }\r\n});\r\n\r\napp.listen(port, () => console.log(\"listening on the port\", port));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}